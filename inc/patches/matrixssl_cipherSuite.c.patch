--- matrixssl-3-7-2b-open-original/matrixssl/cipherSuite.c	2015-03-18 20:57:06.000000000 +0000
+++ matrixssl-3-7-2b-open/matrixssl/cipherSuite.c	2016-03-28 06:53:07.000000000 +0000
@@ -569,7 +569,7 @@ int32 csRsaDecryptPriv(psPool_t *pool, p
 /******************************************************************************/
 
 /* @note this could be marked as const, but we modify the flags field */
-static sslCipherSpec_t	supportedCiphers[] = {
+static sslCipherSpec_t	_supportedCiphers_all[] = {
 /*
 	New ciphers should be added here, similar to the ones below
 
@@ -1423,6 +1423,98 @@ static sslCipherSpec_t	supportedCiphers[
 		csNullVerifyMac}
 };
 
+sslCipherSpec_t	*supportedCiphers_all = _supportedCiphers_all;
+
+static sslCipherSpec_t  _supportedCiphers_http2[] = {
+/*
+    New ciphers should be added here, similar to the ones below
+
+    Ciphers are listed in order of greater security at top... this generally
+    means the slower ones are on top as well.
+*/
+#ifdef USE_TLS_1_2
+
+#ifdef USE_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
+    {TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,
+        CS_ECDHE_ECDSA,
+        CRYPTO_FLAGS_AES256 | CRYPTO_FLAGS_GCM | CRYPTO_FLAGS_SHA3,
+        0,          /* macSize */
+        32,         /* keySize */
+        4,          /* ivSize */
+        0,          /* blocksize */
+        csAesGcmInit,
+        csAesGcmEncrypt,
+        csAesGcmDecrypt,
+        NULL,
+        NULL},
+#endif /* USE_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 */
+
+#ifdef USE_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
+    {TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,
+        CS_ECDHE_ECDSA,
+        CRYPTO_FLAGS_AES | CRYPTO_FLAGS_GCM | CRYPTO_FLAGS_SHA2,
+        0,          /* macSize */
+        16,         /* keySize */
+        4,          /* ivSize */
+        0,          /* blocksize */
+        csAesGcmInit,
+        csAesGcmEncrypt,
+        csAesGcmDecrypt,
+        NULL,
+        NULL},
+#endif /* USE_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 */
+
+#ifdef USE_TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
+    {TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,
+        CS_ECDHE_RSA,
+        CRYPTO_FLAGS_AES256 | CRYPTO_FLAGS_GCM | CRYPTO_FLAGS_SHA3,
+        0,          /* macSize */
+        32,         /* keySize */
+        4,          /* ivSize */
+        0,          /* blocksize */
+        csAesGcmInit,
+        csAesGcmEncrypt,
+        csAesGcmDecrypt,
+        NULL,
+        NULL},
+#endif /* USE_TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 */
+
+#ifdef USE_TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
+    {TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,
+        CS_ECDHE_RSA,
+        CRYPTO_FLAGS_AES | CRYPTO_FLAGS_GCM | CRYPTO_FLAGS_SHA2,
+        0,          /* macSize */
+        16,         /* keySize */
+        4,          /* ivSize */
+        0,          /* blocksize */
+        csAesGcmInit,
+        csAesGcmEncrypt,
+        csAesGcmDecrypt,
+        NULL,
+        NULL},
+#endif /* USE_TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 */
+
+#endif /* USE_TLS_1_2 */
+
+/*
+    The NULL Cipher suite must exist and be the last in this list
+*/
+    {SSL_NULL_WITH_NULL_NULL,
+        CS_NULL,
+        0,
+        0,
+        0,
+        0,
+        0,
+        csNullInit,
+        csNullEncrypt,
+        csNullDecrypt,
+        csNullGenerateMac,
+        csNullVerifyMac}
+};
+
+sslCipherSpec_t	*supportedCiphers_http2 = _supportedCiphers_http2;
+
 #ifdef USE_SERVER_SIDE_SSL
 /******************************************************************************/
 /*
@@ -1452,17 +1544,40 @@ int32 matrixSslSetCipherSuiteEnabledStat
 	if (flags != PS_TRUE && flags != PS_FALSE) {
 		return PS_ARG_FAIL;
 	}
-	for (i = 0; supportedCiphers[i].ident != SSL_NULL_WITH_NULL_NULL; i++) {
-		if (supportedCiphers[i].ident == cipherId) {
+/*
+	Disable/enable cipher from the HTTP/2 approved list first. We only handle here
+	the global case. Per session cipher enabling/disabling is done in the next
+	loop
+*/
+	if (ssl == NULL) {
+		for (i = 0; _supportedCiphers_http2[i].ident != SSL_NULL_WITH_NULL_NULL; i++) {
+			if (_supportedCiphers_http2[i].ident == cipherId) {
+/*
+				Global status of cipher suite.  Disabled status takes
+				precident over session setting
+*/
+				if (flags == PS_TRUE) {
+					_supportedCiphers_http2[i].flags &= ~CRYPTO_FLAGS_DISABLED;
+				} else {
+					_supportedCiphers_http2[i].flags |= CRYPTO_FLAGS_DISABLED;
+				}
+
+				break;
+			}
+		}
+	}
+
+	for (i = 0; _supportedCiphers_all[i].ident != SSL_NULL_WITH_NULL_NULL; i++) {
+		if (_supportedCiphers_all[i].ident == cipherId) {
 			if (ssl == NULL) {
 /*
 				Global status of cipher suite.  Disabled status takes
 				precident over session setting
 */
 				if (flags == PS_TRUE) {
-					supportedCiphers[i].flags &= ~CRYPTO_FLAGS_DISABLED;
+					_supportedCiphers_all[i].flags &= ~CRYPTO_FLAGS_DISABLED;
 				} else {
-					supportedCiphers[i].flags |= CRYPTO_FLAGS_DISABLED;
+					_supportedCiphers_all[i].flags |= CRYPTO_FLAGS_DISABLED;
 				}
 				return PS_SUCCESS;
 			} else {
@@ -1777,33 +1892,33 @@ int32 eccSuitesSupported(ssl_t *ssl, uin
 	int32	i = 0;
 
 	if (cipherSpecLen == 0) {
-		if (sslGetCipherSpec(ssl, TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA) ||
-				sslGetCipherSpec(ssl, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA) ||
-				sslGetCipherSpec(ssl, TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA) ||
-				sslGetCipherSpec(ssl, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA) ||
-				sslGetCipherSpec(ssl, TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA) ||
-				sslGetCipherSpec(ssl, TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA) ||
-				sslGetCipherSpec(ssl, TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA) ||
-				sslGetCipherSpec(ssl, TLS_ECDH_RSA_WITH_AES_256_CBC_SHA) ||
+		if (sslGetCipherSpec(ssl, TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA, NULL) ||
+				sslGetCipherSpec(ssl, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA, NULL) ||
+				sslGetCipherSpec(ssl, TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA, NULL) ||
+				sslGetCipherSpec(ssl, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA, NULL) ||
+				sslGetCipherSpec(ssl, TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA, NULL) ||
+				sslGetCipherSpec(ssl, TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA, NULL) ||
+				sslGetCipherSpec(ssl, TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA, NULL) ||
+				sslGetCipherSpec(ssl, TLS_ECDH_RSA_WITH_AES_256_CBC_SHA, NULL) ||
 #ifdef USE_TLS_1_2
-				sslGetCipherSpec(ssl, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256)||
-				sslGetCipherSpec(ssl, TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384)||
-				sslGetCipherSpec(ssl, TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256) ||
-				sslGetCipherSpec(ssl, TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384) ||
-				sslGetCipherSpec(ssl, TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256) ||
-				sslGetCipherSpec(ssl, TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384) ||
-				sslGetCipherSpec(ssl, TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256)||
-				sslGetCipherSpec(ssl, TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384)||
-				sslGetCipherSpec(ssl, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256) ||
-				sslGetCipherSpec(ssl, TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384) ||
-				sslGetCipherSpec(ssl, TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) ||
-				sslGetCipherSpec(ssl, TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) ||
-				sslGetCipherSpec(ssl, TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256) ||
-				sslGetCipherSpec(ssl, TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384) ||
-				sslGetCipherSpec(ssl, TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256) ||
-				sslGetCipherSpec(ssl, TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384) ||
+				sslGetCipherSpec(ssl, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256, NULL)||
+				sslGetCipherSpec(ssl, TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384, NULL)||
+				sslGetCipherSpec(ssl, TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256, NULL) ||
+				sslGetCipherSpec(ssl, TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384, NULL) ||
+				sslGetCipherSpec(ssl, TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256, NULL) ||
+				sslGetCipherSpec(ssl, TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384, NULL) ||
+				sslGetCipherSpec(ssl, TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256, NULL)||
+				sslGetCipherSpec(ssl, TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384, NULL)||
+				sslGetCipherSpec(ssl, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256, NULL) ||
+				sslGetCipherSpec(ssl, TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384, NULL) ||
+				sslGetCipherSpec(ssl, TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256, NULL) ||
+				sslGetCipherSpec(ssl, TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384, NULL) ||
+				sslGetCipherSpec(ssl, TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256, NULL) ||
+				sslGetCipherSpec(ssl, TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384, NULL) ||
+				sslGetCipherSpec(ssl, TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256, NULL) ||
+				sslGetCipherSpec(ssl, TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384, NULL) ||
 #endif
-				sslGetCipherSpec(ssl, TLS_ECDH_RSA_WITH_AES_128_CBC_SHA)) {
+				sslGetCipherSpec(ssl, TLS_ECDH_RSA_WITH_AES_128_CBC_SHA, NULL)) {
 			return 1;
 		}
 	} else {
@@ -1874,10 +1989,15 @@ int32 csCheckCertAgainstCipherSuite(int3
 	Lookup the given cipher spec ID and return a pointer to the structure
 	if found.  This is used when negotiating security, to find out what suites
 	we support.
+
+	If a cipher is found and the index pointer is not NULL then the cipher's
+	index according to our list is returned in the index pointer
 */
-sslCipherSpec_t *sslGetCipherSpec(ssl_t *ssl, uint32 id)
+sslCipherSpec_t *sslGetCipherSpec(ssl_t *ssl, uint32 id, int16 *index)
 {
 	int16	i;
+	sslCipherSpec_t *supportedCiphers = ssl->supportedCiphers;
+
 #ifdef USE_SERVER_SIDE_SSL
 	int16	j;
 #endif /* USE_SERVER_SIDE_SSL */
@@ -1953,11 +2073,13 @@ sslCipherSpec_t *sslGetCipherSpec(ssl_t 
 			/*	Unusable due to key material not available? */
 #ifdef VALIDATE_KEY_MATERIAL
 			if (haveKeyMaterial(ssl, supportedCiphers[i].type, 0) == PS_SUCCESS) {
+				if (index != NULL) *index = i;
 				return &supportedCiphers[i];
 			}
 			psTraceIntInfo("Matched cipher suite %d but no supporting keys\n",
 				id);
 #else
+			if (index != NULL) *index = i;
 			return &supportedCiphers[i];
 #endif /* VALIDATE_KEY_MATERIAL */
 		}
@@ -1979,6 +2101,7 @@ int32 sslGetCipherSpecList(ssl_t *ssl, u
 	unsigned char	*end, *p;
 	unsigned short	i;
 	int32			ignored;
+	sslCipherSpec_t *supportedCiphers = ssl->supportedCiphers;
 
 	if (len < 4) {
 		return -1;
@@ -2014,6 +2137,7 @@ int32 sslGetCipherSpecList(ssl_t *ssl, u
 	}
 	i *= 2;
 	i -= (unsigned short)ignored;
+
 #ifdef ENABLE_SECURE_REHANDSHAKES
 	if (addScsv == 1) {
 #ifdef USE_CLIENT_SIDE_SSL
@@ -2037,6 +2161,7 @@ int32 sslGetCipherSpecList(ssl_t *ssl, u
 int32 sslGetCipherSpecListLen(ssl_t *ssl)
 {
 	int32	i, ignored;
+	sslCipherSpec_t *supportedCiphers = ssl->supportedCiphers;
 
 	ignored = 0;
 	for (i = 0; supportedCiphers[i].ident != SSL_NULL_WITH_NULL_NULL; i++) {
